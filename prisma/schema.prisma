generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model user {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  email                    String?
  first_name               String
  last_name                String
  mobile_number            String?
  profile_image            String?
  is_login                 Int                  @default(0)
  reset_token              String?
  reset_token_expires_at   DateTime?
  is_validated             Int?
  otp_verification_code    Int?
  email_verification_token String?
  password                 String
  role_id                  String               @db.ObjectId
  role                     role                 @relation(fields: [role_id], references: [id])
  office_id                String               @db.ObjectId
  office                   office               @relation(fields: [office_id], references: [id])
  gender_id                String               @db.ObjectId
  gender                   gender               @relation(fields: [gender_id], references: [id])
  country_id               String               @db.ObjectId
  country                  country              @relation(fields: [country_id], references: [id])
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
}

model role {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  user                     user[]
}

model office {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  office_name              String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  user                     user[]
  token                    token[]
  counter                  counter[]
}

model gender {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  user                     user[]
  token                    token[]
}

model services {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  title                    String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  token                    token[]
}

model queue_services {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  color                    String
  slug                     String?
  route                    String?
  icon                     String?
  fields                   Json?
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
}

model priority {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  short_name               String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  token                    token[]
}

model status {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  token                    token[]
}

model counter {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  title                    String
  counter_number           String
  office_id                String               @db.ObjectId
  status                   Int                  @default(0)
  user_id                  String?              @db.ObjectId
  created_at               DateTime?
  updated_at               DateTime?
  office                   office               @relation(fields: [office_id], references: [id])
  token                    token[]
}

model token {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String?
  email                    String?
  mobile                   String?
  gender_id                String               @db.ObjectId
  service_id               String               @db.ObjectId
  priority_id              String               @db.ObjectId
  office_id                String               @db.ObjectId
  status_id                String               @db.ObjectId
  counter_id               String?              @db.ObjectId
  user_id                  String?              @db.ObjectId
  token                    String
  duration                 String?
  remarks                  String?
  created_at               DateTime?
  updated_at               DateTime?
  gender                   gender?              @relation(fields: [gender_id], references: [id])
  service                  services?            @relation(fields: [service_id], references: [id])
  priority                 priority?            @relation(fields: [priority_id], references: [id])
  office                   office?              @relation(fields: [office_id], references: [id])
  counter                  counter?             @relation(fields: [counter_id], references: [id])
  status                   status?              @relation(fields: [status_id], references: [id])
}

model wt_news {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  title                    String
  description              String?
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
}

model wt_video {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  title                    String
  link                     String
  description              String?
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
}

model country {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  country_name             String
  country_code             String
  iso                      String
  status                   Int                  @default(1)
  created_at               DateTime?
  updated_at               DateTime?
  user                     user[]
}
